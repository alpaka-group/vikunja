################################################################################
# VIKUNJA_CXX                             : {g++, clang++}
#   [g++]                                 : {7, 8, 9, 10, 11} <list>
#   [clang++]                             : {6.0, 7, 8, 9, 10} <list>
# ALPAKA_CXX_STANDARD                     . {17, 20}, optional
# VIKUNJA_BOOST_VERSIONS                  : {1.65.1, 1.66.0, 1.67.0, 1.68.0, 1.69.0, 1.70.0, 1.71.0, 1.72.0, 1.73.0} <list>
# VIKUNJA_BUILD_TYPE                      : {Debug, Release}
# VIKUNJA_CMAKE_ARGS                      : <string>
# VIKUNJA_CXX_TEST                        : {ON}, optional

variables:
  CONTAINER_VERSION: 2.0

include:
  - local: '/script/compiler_base.yml'
  - local: '/script/cxx_tests.yml'

stages:
  - validate
  - compile-and-run

################################################################################
# Check code formation with clang-format
# pull request validation:
#   - check C++ code style
pull-request-validation:
  stage: validate
  image: ubuntu:focal
  script:
    - echo "Container version -> ${CONTAINER_VERSION}"
    - apt update
    # install clang-format-11
    - apt install -y -q wget
    # source: https://github.com/muttleyxd/clang-tools-static-binaries/releases
    - wget https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-f3a37dd2/clang-format-12.0.1_linux-amd64
    - mv clang-format-12.0.1_linux-amd64 /usr/bin/clang-format
    - chmod +x /usr/bin/clang-format
    - clang-format --version
    # Check C++ code style
    - source $CI_PROJECT_DIR/script/check_cpp_code_style.sh

variables:
  VIKUNJA_ALPAKA_VERSIONS: "0.6.0 0.6.1 0.7.0 0.8.0"

cuda112:
  image: registry.hzdr.de/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-cuda112-gcc:${CONTAINER_VERSION}
  variables:
    VIKUNJA_CXX: "g++-9"
    VIKUNJA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda

gcc:
  variables:
    VIKUNJA_CXX: "g++-7 g++-8 g++-9 g++-10 g++-11"
    VIKUNJA_BOOST_VERSIONS: "1.65.1 1.75.0"
  extends: .base_gcc

clang:
  variables:
    VIKUNJA_CXX: "clang++-6.0 clang++-7 clang++-8 clang++-9 clang++-10 clang++-11"
    VIKUNJA_BOOST_VERSIONS: "1.65.1 1.75.0"
  extends: .base_clang

# cudaClang101:
#   image: registry.hzdr.de/crp/alpaka-group-container/alpaka-ci-cuda101-clang:${CONTAINER_VERSION}
#   variables:
#     VIKUNJA_CXX: "clang++-9 clang++-10 clang++-11"
#     VIKUNJA_BOOST_VERSIONS: "1.65.1 1.75.0"
#   extends: .base_cuda_clang

# removed HIP support for the moment
# CI errors are not reproduce able
#hip42:
#  image: registry.hzdr.de/crp/alpaka-group-container/alpaka-ci-rocm4.2:${CONTAINER_VERSION}
#  variables:
#    CMAKE_MODULE_PATH: "/opt/rocm-4.2.0/hip/cmake"
#    VIKUNJA_BOOST_VERSIONS: "1.65.1 1.75.0"
#  extends: .base_hip

integration_add_subdirectory:
  image: registry.hzdr.de/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-gcc:${CONTAINER_VERSION}
  stage: compile-and-run
  variables:
    VIKUNJA_BOOST_VERSIONS: 1.74.0
    VIKUNJA_GCC_VERSION: 9
  script:
    - export CC=gcc-$VIKUNJA_GCC_VERSION
    - export CXX=g++-$VIKUNJA_GCC_VERSION
    - export CUPLA_TRANSFORM_DIR=$CI_PROJECT_DIR/cupla_transform
    - source $CI_PROJECT_DIR/script/integration_test/prepare_add_subdirectory.sh
    - source $CI_PROJECT_DIR/script/integration_test/run.sh
  tags:
    - x86_64
    - cpuonly

integration_find_package:
  image: registry.hzdr.de/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-gcc:${CONTAINER_VERSION}
  stage: compile-and-run
  variables:
    VIKUNJA_BOOST_VERSIONS: 1.74.0
    VIKUNJA_GCC_VERSION: 9
  script:
    - export CC=gcc-$VIKUNJA_GCC_VERSION
    - export CXX=g++-$VIKUNJA_GCC_VERSION
    - export CUPLA_TRANSFORM_DIR=$CI_PROJECT_DIR/cupla_transform
    - source $CI_PROJECT_DIR/script/integration_test/prepare_find_package.sh
    - source $CI_PROJECT_DIR/script/integration_test/run.sh
  tags:
    - x86_64
    - cpuonly
